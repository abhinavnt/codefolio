name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger pipeline on push to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install docker-compose
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Create temporary .env files
      - name: Create temporary .env files
        run: |
          mkdir -p server client  # Create server and client directories if they don’t exist
          touch server/.env       # Create empty server/.env
          touch client/.env       # Create empty client/.env

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Build and push Docker images
      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.prod.yaml build
          docker-compose -f docker-compose.prod.yaml push

      # Step: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step: Deploy using AWS SSM
      - name: Deploy using AWS SSM
        run: |
          command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.SSM_INSTANCE_ID }}" \
            --comment "CI/CD Deployment" \
            --parameters commands="cd /home/ubuntu && docker-compose pull && docker-compose up -d" \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $command_id"

          for i in {1..10}; do
            status=$(aws ssm list-command-invocations \
              --command-id "$command_id" \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)

            echo "Current status: $status"

            if [[ "$status" == "Success" ]]; then
              echo "✅ Deployment successful."
              exit 0
            elif [[ "$status" == "Failed" || "$status" == "Cancelled" || "$status" == "TimedOut" ]]; then
              echo "❌ Deployment failed with status: $status"
              exit 1
            else
              echo "⏳ Still running... Retrying in 5s"
              sleep 5
            fi
          done

          echo "❌ Deployment timed out waiting for success status."
          exit 1
